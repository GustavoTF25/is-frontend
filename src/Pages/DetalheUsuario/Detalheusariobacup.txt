import { useNavigate, useParams } from "react-router-dom";
import { IPostagem, ISeguir, IUsuario } from "../../Interface";
import { useEffect, useState } from "react";
import axios from "axios";
import { Box, Container, Paper, Grid, CardMedia, Typography } from "@mui/material";
import { CardPostagem } from "../../Components/CardPostagem/CardPostagem";
import { SeguirUsuario } from "../../Components/SeguirUsuario/SeguirUsuario";

export const DetalheUsuario = () => {
const { usu_id } = useParams<{ usu_id?: string }>();
  const navigate = useNavigate();
  const token = localStorage.getItem("token");
  const [usuario, setUsuario] = useState<IUsuario | null>(null);
  const [listaPostagem, setListaPostagem] = useState<IPostagem[]>([]);
  const [isFollowing, setIsFollowing] = useState<boolean>(false); // Estado de seguir

  useEffect(() => {
    axios
      .get<{ response: IUsuario[] }>(`http://localhost:8000/usuarios/${usu_id}/`)
      .then(({ data }) => {
        setUsuario(data.response[0]);
      })
      .catch((error) => {
        console.error("Erro ao obter detalhes do usuario:", error);
      });
  }, [usu_id]);

  useEffect(() => {
    axios
      .get<{ response: IPostagem[] }>(`http://localhost:8000/postagens/detalhe/${usu_id}`)
      .then(({ data }) => {
        setListaPostagem(data.response);
      })
      .catch((error) => {
        console.error("Erro ao obter postagens:", error);
      });
  }, [usu_id]);

  useEffect(() => {
    if (token) {
      axios
        .get<{ response: ISeguir }>(`http://localhost:8000/usuarios/seguir/${usu_id}`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        })
        .then(({ data }) => {
          setIsFollowing(data.response.seg_valor); // Atualizar estado de seguir com base na resposta da API
        })
        .catch((error) => {
          console.error("Erro ao obter status de seguir:", error);
        });
    }
  }, [usu_id, token]);

  const formatDate = (isoDate: string | undefined) => {
    if (!isoDate) return "Data desconhecida";
    const date = new Date(isoDate);
    const day = String(date.getDate()).padStart(2, "0");
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
  };

  const renderPlaceholders = (count: number) => {
    const placeholders = [];
    for (let i = 0; i < count; i++) {
      placeholders.push(
        <Grid item xs={12} sm={4} key={`placeholder-${i}`}>
          <Box
            sx={{
              width: "100%",
              height: 200,
              backgroundColor: "rgba(0, 0, 0, 0.1)",
              borderRadius: "10px",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
            }}
          >
            <Typography variant="h6" color="textSecondary">
              Nenhuma postagem ainda
            </Typography>
          </Box>
        </Grid>
      );
    }
    return placeholders;
  };

  return (
    <Container maxWidth={"lg"}>
      <Box
        margin={6}
        maxWidth={"100%"}
        width={"95%"}
        height={"auto"}
        display={"flex"}
        gap={1}
        flexDirection={"column"}
        justifyItems={"center"}
        alignItems={"center"}
        borderRadius={"15px"}
        component={Paper}
        padding={5}
        boxShadow={2}
      >
        <Grid container spacing={5}>
          <Grid item xs={12} sm={4}>
            <CardMedia
              component="img"
              height="140"
              src={`http://localhost:8000/${usuario?.usu_foto}`}
              sx={{ borderRadius: "10px", maxHeight: "300px" }}
            />
          </Grid>
          <Grid item xs={12} sm={8}>
            <Box
              alignItems={"center"}
              display={"flex"}
              justifyContent={"center"}
            >
              <Typography variant="h4">{usuario?.usu_nome}</Typography>
            </Box>
            <Box
              marginTop={"5%"}
              alignItems={"center"}
              display={"flex"}
              justifyContent={"center"}
            >
              <Typography sx={{ fontStyle: "italic" }}>
                {usuario?.usu_bio}
              </Typography>
              <Box marginTop={37} marginLeft={60} position={"absolute"}>
              <Box>
                {/* Integrar o botão de seguir */}
                {usuario && (
                  <SeguirUsuario usu_id={usuario.usu_id} isFollowing={isFollowing} />
                )}
              </Box>
              </Box>
              <Box marginTop={2}>
              
              </Box>
              
            </Box>
          </Grid>
          <Grid item xs={12}>
           
            <Typography>
              Usuário desde {formatDate(usuario?.usu_datacriado)}
            </Typography>
            <Typography>
              Total de Seguidores {usuario?.usu_totalseguidores}
            </Typography>
            
               
              
          </Grid>
          
        </Grid>
      </Box>
      <Box marginTop={4} marginLeft={5}>
        <Typography variant="h5" gutterBottom>
            Postagens de {usuario?.usu_nome}
        </Typography>
        <Grid container spacing={5}>
            {listaPostagem.map((postagem, index) => (
                <Grid item xs={12} sm={4} key={index}>
                    <CardPostagem postagem={postagem} />
                </Grid>
            ))}
            {listaPostagem.length < 3 && renderPlaceholders(3 - listaPostagem.length)}
        </Grid>
        </Box>
    </Container>
  );
};


// <Box marginTop={4} marginLeft={5}>
// <Typography variant="h5" gutterBottom>
//     Postagens de {usuario?.usu_nome}
// </Typography>
// <Grid container spacing={5}>
//     {listaPostagem.map((postagem, index) => (
//         <Grid item xs={12} sm={4} key={index}>
//             <CardPostagem postagem={postagem} />
//         </Grid>
//     ))}
//     {listaPostagem.length < 3 && renderPlaceholders(3 - listaPostagem.length)}
// </Grid>
// </Box>
